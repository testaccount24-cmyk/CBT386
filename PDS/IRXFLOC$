
                       IRXFLOC
                       -------

IRXFLOC is a Rexx Package that extend Rexx functions.

The default installation has an empty IRXFLOC module in SYS1.LINKLIB.
To install this package compile every function and then compile and link
IRXFLOC to create the package. Copy to SYS1.LINKLIB, refresh LLA if
needed and restart TSO sesion. Be sure that your installation has no a
IRXFLOC package yet installed. If your system has one expand it with
this functions.

This package has some usefull functions and is very easy to add your
own functions. I recommend this way because Rexx external functions
are loaded from disk on every call, but packages are only loaded
one time at begining of sesion. If you have slowly execs try it, it
speed up 100%, 300%, and more.

Please be free to modify, replace, add new functions and let me know.

                     THE FUNCTIONS
                     -------------

Every functions must be called as functions no procedures.

------------------------------------------------------------------------
L_EDITM.

Edit mask. Return any number foramted as:
           "Z.ÑÑÑ.ÑÑÑ.ÑÑÑ.ÑÑÑ.ÑÑÑ,ÑÑÑÑÑ"
Right aligned and padded with blanks. Allways return five decimal
positions. Make a substr to get your result.

|say L_EDITM(1234.45)                                                  |

Returns:
'                 1.234,45000'
Change ',' and '.' in source code according to your needs.

------------------------------------------------------------------------
L_ENQRES.

ENQ or DEQ a SYSTEMS EXCL UNCOND resource with MAJOR=IRXF@ENQ.
L_ENQRES("E"/"D","MINOR")
E/D   - Enqueue/Dequeue
Minor - Your resource
RC = 1 - OK

|if L_ENQRES("E","MYRES") then do                                      |
|   call process                                                       |
|   retc = L_ENQRES("D","MYRES")                                       |
|   end                                                                |


------------------------------------------------------------------------
L_MATCH.

Compare a string with a pattern returnig result.
Pattern must contain * for varios characters and % for one character.
String and pattern are limited to 256 chars.
RC = 1 - Match, 0 - No Match

|if L_MATCH(text,"SYS1.*") then do                                     |

------------------------------------------------------------------------
L_DELAY.

Delay execution.
L_DELAY(HHMMSSDC)
HH = Hours
MM = Minutes
SS = Seconds
D  = Seconds/10
C  = Seconds/100

|ret_c = L_Delay(3000)     /* Wait for 30 s. */                        |
|ret_c = L_Delay(1)        /* Wait for 1/100 s. */                     |
|ret_c = L_Delay(24000000) /* Wait for 1 day */                        |

------------------------------------------------------------------------
L_WTO.

Write to operator. WTO/WTOR
L_WTO("MSG"Ë,"R|B"!Ë,"S"!)
MSG max 122 chars.
"R" reply required.
"B" 'Bold' wto. (Wto with descriptor code 12, White-non rollable)
"S" Supervisor State. Supress "+" in WTO text.
Return = 1 - OK
         Message identification number - For "Bold" wtos.
         Reply Information (up to 118) - For "Replys" wtos.(WTORs)

|retc = L_WTO("BEGIN PROCESS")                                         |
|wton = L_WTO("Initialization....","B")                                |
|if L_WTO("OK TO CONTINUE","R") = "OK" then do                         |

------------------------------------------------------------------------
L_SORT.

Call sort.
L_SORT will call sort passing data in stack and retrieving ordered
data to stack.
L_SORT("CNTL"Ë,"M"!)
CNTL - Control sysin. (Max 255 chars).
M - Messages required. (User must alloc sysout dd)
Retcode = 1 OK

| ret_c = L_SORT("SORT FIELD=(10,2,CH,A)")                             |
| ret_c = L_SORT("SORT FIELD=(4,8,CH,A) INCLUDE COND.....")            |

Warning: Records in stack are passed like variable records (RDW), so you
         must add 4 for all records position.

------------------------------------------------------------------------
L_U34.

Return unit tape UCBs to stack.

|retc = L_U34()                                                        |

------------------------------------------------------------------------
L_VSKS.

Rexx/VASM KSDS Interface
L_VSKS("function")

Functions:

   OPEN   - Open file
   CLOSE  - Close file
   INSERT - Insert (Add) record
   SELECT - Select (Search) key
   DELETE - Delete selected record
   UPDATE - Update selected record
   SELECN - Search next record
   SELECF - Select first record ( = KEY or > KEY)
   SELECB - Select previous record
   SELECL - Select last record

RetCodes:
         0 - O.K.
         8 - Invalid function
         9 - IRXEXCOM error
         10 - OPEN error
         11 - CLOSE error
         12 - INSERT error
         13 - SELECT error
         14 - DELETE error (Key Does not exist)
         15 - DELETE error
         16 - UPDATE error (Key Does not exist)
         17 - UPDATE error
         18 - SELECN error (End of dataset)
         19 - GENCB error
         20 - SELECF error (End of dataset)
         21 - SELECB error (Begin of dataset)
         22 - SELECL error (Dos not found)

You must allocate a VSAM/KSDS with ddname(KEINTVF).
L_VSKS uses three Rexx variables:
KEINTV_ACBA = Address of VSAM ACB. Do not modify
KEINTV_ACBR = Address of VSAM RPL. Do not modify
KEINTV_BUFF = Record Buffer

| "alloc fi(keintvf) da('my.vsam') shr" '                              |
| if L_VSKS("OPEN") then do                                            |
|    KEINTV_BUFF = mykey                                               |
|    if L_VSKS("SELECT") = 0 then say "FOUND" substr(KEINTV_BUFF,1,20) |
|    end                                                               |
| rk = L_VSKS("CLOSE")                                                 |
| free fi(keintvf)                                                     |

------------------------------------------------------------------------
L_MON.

Draw a progress barr in the screen.
L_MON(I,N,"Text")
I = Count
N = Total
Text = Window title
L_MON only actualize screen when it needed, no on every call, so you
must use to monitorize process.

|do i = 1 to 100                                                       |
|   retc = L_MON(I,100,"Be patient")                                   |
|   call process                                                       |
|   end'                                                               |

------------------------------------------------------------------------
L_CSI.

Call Catalog Search Interface.
L_CSI(Level,Catalog,EntType,Flags,Fields)
Level = Dataset level, name, or mask (*, **, %)
Catalog = Catalog name
EntType = Entry Type
Flags = Four positions "Y" or blank
Fields = Fields to be readed from catalog
Retcode = 1 (OK)

* Catalog Search Interface is more faster and clean than LISTCAT, it can
* search datasets, catalogs and library tapes.
* Refer to "Catalog Search Interface User's Guide" in Appendix "D" of
* "DFSMS/MVS Managing Catalogs" for details

Fields must be padded to eight positions

|fields = 'ENTYPE  '||,                                                |
|         'VOLSER  '||,                                                |
|         'DEVTYP  '                                                   |
|if l_csi('SYS1.**','','','',fields) then do                           |
|   say "Total Call to CSI....." c2d(csi.debug.calls)                  |
|   say "Total Entries returned" c2d(csi.entry.0)                      |
|   say "Total Catalogs readed " c2d(csi.catentry.0)                   |
|   say "--Catalogs readed"                                            |
|   do i = 1 to c2d(csi.catentry.0)                                    |
|      say csi.catentry.i                                              |
|      end                                                             |
|   say "--Entries Founds"                                             |
|   do i = 1 to c2d(csi.entry.0)                                       |
|      if bitand(csi.flag.i,'20'x) = '20'x then do                     |
|         say csi.entry.i csi.volser.i csi.entype.i c2x(csi.devtyp.i)  |
|         end                                                          |
|      else say csi.entry.i csi.error.i                                |
|      end                                                             |
|   end                                                                |
|else do                                                               |
|   say c2d(csi.debug.calls)                                           |
|   say c2x(csi.debug.rsn)                                             |
|   end                                                                |

------------------------------------------------------------------------
L_DAI.

Get Dasd Information
L_DAI(Flags)

Flags = 7 positions Y/N or blanks
        Y...... - Get DEVTYPE information
        .Y..... - Get LSPACE information
        ..Y.... - Get SMS information
        ...Y... - Include Offline volumes
        ....Y.. - Include nonSms volumes
        .....Y. - Include Sms volumes
        ......Y - Display Progress Barr
Retcode = 1 (OK)

L_DAI must run authorized, it used SVC 109 (200) to get auth. See
IGX00200. Modify or add your auth method.
L_DAI scan UCBs for all Dasd in the system and return requested
information to the active stack. Each record can be formated with
this code:
/*-------------------------------------------------------------------*/
Format_Dai:
parse arg 1   Dai_Type,              /* 'F':Offline,'S':SMS,'N':NOSMS */
          2   Dai_Addr,              /* MVS Address 4 Digits          */
          6   Dai_Volser,            /* Volser                        */
          12  Dai_Reserved,          /* Reserved                      */
          13  Dai_Devt_Type,         /* Device Type (UCBTYP)          */
          17  Dai_Devt_MaxBlksize,   /* Maximum Block Size            */
          21  Dai_Devt_Cyls,         /* Cylinders Volumen             */
          23  Dai_Devt_TrksCyls,     /* Tracks per Cylinders          */
          25  Dai_Devt_TrkLen,       /* Track Length                  */
          27  Dai_Devt_BlkOver,      /* Block OverHead                */
          29  Dai_Devt_BlkOverFac,   /* Block OverHead or Modulo Fac. */
          30  Dai_Devt_Flgs,         /* Flags - See below             */
          31  Dai_Devt_TolFactor,    /* Tolerance Factor              */
          33  Dai_Devt_R0OverHead,   /* R0 OverHead for sector calcs. */
          35  Dai_Devt_Sectors,      /* Number of sectors for the dev.*/
          36  Dai_Devt_DataSect,     /* Number of data sectors.       */
          37  Dai_Spac_Flg1,         /* Flags - See below             */
          38  Dai_Spac_Flg2,         /* Flags - See below             */
          39  Dai_Spac_Reserved,     /* Reserved                      */
          41  Dai_Spac_FreeExts,     /* Numero de Free Extents        */
          45  Dai_Spac_FreeCyls,     /* Numero de Free Cylinders      */
          49  Dai_Spac_FreeTrks,     /* Numero de Free Trks Adicional.*/
          53  Dai_Spac_LargCyls,     /* Numero Cyls en Largest Extent.*/
          57  Dai_Spac_LargTrks,     /* Numero Trak en Larg.Ext. Add..*/
          61  Dai_Spac_F0Count,      /* Format 0 Count                */
          65  Dai_Spac_FreeVirs,     /* Free VIR Count                */
          69  Dai_Spac_FragIdx,      /* Fragmentation Index           */
          73  Dai_SmsI_Vldpid,       /* VLDID = 'IGDVLD'              */
          81  Dai_SmsI_Reserved,     /* Reserved                      */
          83  Dai_SmsI_Vldpver,      /* Version id                    */
          85  Dai_SmsI_Vldpcnt,      /* NUMBER OF VOLUMES COUNT       */
          89  Dai_SmsI_Vldtyp,       /* TYPE OF ITEMS IN LIST         */
          91  Dai_SmsI_Reserved2,    /* Reserved                      */
          93  Dai_SmsI_Vldplen,      /* Length of one def VLDEF       */
          97  Dai_SmsI_Vldvslen,     /* Volser length = 6             */
          99  Dai_SmsI_Vldvser,      /* Volser                        */
          105 Dai_SmsI_Reserved3,    /* Reserved                      */
          129 Dai_SmsI_Vldduser,     /* USERID OF LAST UPDATER        */
          137 Dai_SmsI_Vldddate,     /* DATE OF LAST UPDATE           */
          147 Dai_SmsI_Vldtrksz,     /* Volume R1 track capacity      */
          149 Dai_SmsI_Reserved4,    /* Reserved                      */
          153 Dai_SmsI_Vlddtime,     /* Time OF LAST UPDATE           */
          161 Dai_SmsI_Vldsgl,       /* Length of storgrp name        */
          163 Dai_SmsI_Vldsgn,       /* Name of storgrp               */
          193 Dai_SmsI_Vldnstat,     /* Old status by system          */
          209 Dai_SmsI_Vldnucba,     /* ADDRESS OF UCB IF KNOWN       */
          213 Dai_SmsI_Vldntcpy,     /* TOTAL CAPACITY IN MEGABYTES   */
          217 Dai_SmsI_Vldnfree,     /* AMOUNT FREE IN MEGABYTES      */
          221 Dai_SmsI_Vldnlext,     /* LARGEST FREE EXTENT IN MB.    */
          225 Dai_SmsI_Vldflags,     /* Flags, see below              */
          226 Dai_SmsI_Reserved5,    /* Reserved                      */
          227 Dai_SmsI_Vldn0cnt,     /* Volume level Reset Count      */
          229 Dai_SmsI_Vldnssi1,     /* Reserved for subsystem use    */
          233 Dai_SmsI_Vldsgst,      /* STORGRP status on this sytem  */
          234 Dai_SmsI_Reserved5,    /* Reserved                      */
          237 Dai_SmsI_Vldnlevl,     /* Update level for volume       */
          241 Dai_SmsI_Vldcsmss,     /* Old location of confirmed stat*/
          249 Dai_SmsI_Vldsysof,     /* Offset of system data         */
          253 Dai_SmsI_Vldsysln,     /* Length of system data         */
          257 Dai_SmsI_Reserved6,    /* Reserved                      */
          273 Dai_SmsI_SystemsStat   /* Systems Status                */
Dai_Devt_Type = c2x(Dai_Devt_Type)
Dai_Devt_MaxBlksize = c2d(Dai_Devt_MaxBlksize)
Dai_Devt_Cyls = c2d(Dai_Devt_Cyls)
Dai_Devt_TrksCyls = c2d(Dai_Devt_TrksCyls)
Dai_Devt_TrkLen = c2d(Dai_Devt_Trklen)
Dai_Devt_BlkOver = c2d(Dai_Devt_BlkOver)
Dai_Devt_BlkOverFac = c2d(Dai_Devt_BlkOverFac)
                                     /* Invalid Cylinders number     */
Dai_Devt_Flg_CylInvalid = bitand(Dai_Devt_Flgs,x'80') = x'80'
                                     /* Reserved                     */
Dai_Devt_Flg_Reserved1 = bitand(Dai_Devt_Flgs,x'40') = x'40'
                                     /* Reserved                     */
Dai_Devt_Flg_Reserved2 = bitand(Dai_Devt_Flgs,x'20') = x'20'
                                     /* Modulo Device                */
Dai_Devt_Flg_Modulo = bitand(Dai_Devt_Flgs,x'10') = x'10'
                                     /* BlkOver = OverHead for any Bl*/
Dai_Devt_Flg_OverH = bitand(Dai_Devt_Flgs,x'08') = x'08'
                                     /* Reserved                     */
Dai_Devt_Flg_Reserved3 = bitand(Dai_Devt_Flgs,x'04') = x'04'
                                     /* Reserved                     */
Dai_Devt_Flg_Reserved4 = bitand(Dai_Devt_Flgs,x'02') = x'02'
                                     /* Tolerance Factor for Blk     */
Dai_Devt_Flg_TolFact = bitand(Dai_Devt_Flgs,x'01') = x'01'
Dai_Devt_TolFactor = c2d(Dai_Devt_TolFactor)
Dai_Devt_R0OverHead = c2d(Dai_Devt_R0OverHead)
Dai_Devt_Sectors = c2d(Dai_Devt_Sectors)
Dai_Devt_DataSect = c2d(Dai_Devt_DataSect)
                                     /* Valid LSPACE data            */
Dai_Spac_Flg_SpaceInf = bitand(Dai_Spac_Flg1,x'80') = x'80'
                                     /* Valid F0 data                */
Dai_Spac_Flg_F0Inf = bitand(Dai_Spac_Flg1,x'40') = x'40'
                                     /* Valid VIR data               */
Dai_Spac_Flg_VirInf = bitand(Dai_Spac_Flg1,x'20') = x'20'
                                     /* Vtoc Index found             */
Dai_Spac_Flg_Ixds = bitand(Dai_Spac_Flg2,x'80') = x'80'
                                     /* Vtoc Index Active            */
Dai_Spac_Flg_Ixac = bitand(Dai_Spac_Flg2,x'40') = x'40'
Dai_Spac_FreeExts = c2d(Dai_Spac_FreeExts)
Dai_Spac_FreeCyls = c2d(Dai_Spac_FreeCyls)
Dai_Spac_FreeTrks = c2d(Dai_Spac_FreeTrks)
Dai_Spac_LargCyls = c2d(Dai_Spac_LargCyls)
Dai_Spac_LargTrks = c2d(Dai_Spac_LargTrks)
Dai_Spac_F0Count = c2d(Dai_Spac_F0Count)
Dai_Spac_FreeVirs = c2d(Dai_Spac_FreeVirs)
Dai_Spac_FragIdx = c2d(Dai_Spac_FragIdx)
Dai_SmsI_Vldpver = c2d(Dai_SmsI_Vldpver)
Dai_SmsI_Vldpcnt = c2d(Dai_SmsI_Vldpcnt)
Dai_SmsI_Vldplen = c2d(Dai_SmsI_Vldplen)
Dai_SmsI_Vldvslen = c2d(Dai_SmsI_Vldvslen)
Dai_SmsI_Vldtrksz = c2d(Dai_SmsI_Vldtrksz)
Dai_SmsI_Vldsgl = c2d(Dai_SmsI_Vldsgl)
Dai_SmsI_Vldsgn = substr(Dai_SmsI_Vldsgn,1,Dai_SmsI_Vldsgl)
Dai_SmsI_Vldntcpy = c2d(Dai_SmsI_Vldntcpy)
Dai_SmsI_Vldnfree = c2d(Dai_SmsI_Vldnfree)
Dai_SmsI_Vldnlext = c2d(Dai_SmsI_Vldnlext)
                                     /* Vol is in conversion         */
Dai_SmsI_Flg_Conv = bitand(Dai_SmsI_Vldflags,x'80') = x'80'
Dai_SmsI_Vldn0cnt = c2d(Dai_SmsI_Vldn0cnt)
Dai_SmsI_Vldnlevl = c2d(Dai_SmsI_Vldnlevl)
Dai_SmsI_SmsStat. = ""                /* SMS Status */
                                      /* 0 - No status given */
                                      /* 1 - Enabled */
                                      /* 2 - Quiesce/All */
                                      /* 3 - Quiesce/New */
                                      /* 4 - Disabled/All */
                                      /* 5 - Disabled/New */
Dai_SmsI_MvsStat. = ""                /* MVS Status */
                                      /* 1 - Online */
                                      /* 2 - Offline */
                                      /* 3 - Pending offline */
                                      /* 4 - Boxed */
                                      /* 5 - Not Ready */
Dai_SmsI_SmsCStat. = ""               /* Confirmed SMS Status */
                                      /* See SmsStat */
/* Up to 256 sistems status flags */
do j = 1 to 4
   Dai_SmsI_SmsStat.j = c2d(substr(Dai_SmsI_SystemsStat,((j-1)*8)+1,1))
   Dai_SmsI_MvsStat.j = c2d(substr(Dai_SmsI_SystemsStat,((j-1)*8)+2,1))
   Dai_SmsI_SmsCStat.j = c2d(substr(Dai_SmsI_SystemsStat,((j-1)*8)+3,1))
   end
return
/*-------------------------------------------------------------------*/
Ej:
|/* Rexx - Read all SMS volumes and get total space */                 |
|space = 0                                                             |
|spacefree = 0                                                         |
|if L_DAI("NNYNNYN") then do                                           |
|   n = queued()                                                       |
|   do i = 1 to n                                                      |
|      pull b                                                          |
|      call Format_dai(b)                                              |
|      space = space + Dai_SmsI_Vldntcpy                               |
|      spacefree = spacefree + Dai_SmsI_Vldnfree                       |
|      vols = vols + 1                                                 |
|      end                                                             |
|   end                                                                |
------------------------------------------------------------------------
L_DOM.

Delete Operator Message.

r = L_DOM(wton)
wton  - Wto Number, returned by L_WTO
RC = 1 - OK

|wton = L_WTO("Starting","B")                                          |
|call Initialization                                                   |
|r = L_DOM(wton)                                                       |

------------------------------------------------------------------------
L_CA1.

Get CA1 tape volume information.
* MUST BE COMPILED WITH CAIMAC LIBRARY *
r = L_CA1(Volume)
Retcode = 1 (OK)

L_CA1 returns CA1 volume information to the active stack. Each record
can be formated with this code:
/*-------------------------------------------------------------------*/
Format_TMMREC:
parse arg 1   TMVOLSER,              /* VOLUME SERIAL NUMBER         */
          7   TMDSN,                 /* DATA SET NAME                */
          51  TMEXPDT,               /* EXPIRATION DATE              */
          55  TMVOLSEQ,              /* VOLUME SEQUENCE NUMBER       */
          57  TMFRSVOL,              /* FIRST VOLSER OF DATA SET     */
          63  TMPRVVOL,              /* PREVIOUS VOLSER OF DATA SET  */
          69  TMNXTVOL,              /* NEXT VOLSER OF DATA SET      */
          75  TM#DSNBS,              /* NUMBER OF DATA SET NAME BLOCK*/
          77  TMADSNB,               /* ADDRESS OF 1ST DSNB          */
          81  TMALDSNB,              /* ADDRESS OF LAST DSNB         */
          85  TMFLAG1,               /* INTERNAL FLAG BITS           */
          86  TMFLAG2,               /* INTERNAL FLAG BITS           */
          87  TMFLAG3,               /* INTERNAL FLAG BITS           */
          88  TMFLAG4,               /* INTERNAL FLAG BITS           */
          89  TMTRTCH,               /* RECORDING TECHNIQUE          */
          90  TMDEN,                 /* DENSITY                      */
          91  TMLTYPE,               /* TAPE LABEL TYPE              */
          92  TMRECFM,               /* RECORD FORMAT                */
          93  TMLRECL,               /* LOGICAL RECORD LENGTH        */
          97  TMBLKSI,               /* MAXIMUM BLOCK SIZE           */
         101  TMBLKCNT,              /* DATA SET BLOCK COUNT         */
         105  TMOUTDAT,              /* DATE TAKEN OUT OF AREA       */
         109  TMOUTAR,               /* OUT OF AREA CODE             */
         113  TMSLOT,                /* VAULT SLOT NUMBER            */
         117  TMCRTDT,               /* CREATION DATE                */
         121  TMFILL1,               /* Reserved                     */
         122  TMCRTTI,               /* CREATION TIME                */
         125  TMJOBNM,               /* CREATING JOB NAME            */
         133  TMSTPNAM,              /* CREATING STEP NAME           */
         141  TMDDNAME,              /* CREATING DDNAME              */
         149  TMCRUNI,               /* CREATION UNIT                */
         151  TMLASUSD,              /* DATE LAST USED               */
         155  TMFILL2,               /* Reserved                     */
         156  TMLASUST,              /* TIME LAST USED               */
         159  TMLASUSJ,              /* JOB NAME WHICH LAST USED VOL */
         167  TMUSUNI,               /* UNIT LAST USED               */
         169  TMACTVL1,              /* ACTUAL INTERNAL VOLSER       */
         174  TMCLNCNT,              /* NUMBER OF TIMES TAPE CLEANED */
         175  TMUSECLN,              /* USE COUNT AT LAST CLEANING   */
         177  TMDATCLN,              /* DATE OF LAST CLEANING        */
         181  TMBTHDT,               /* DATE TAPE IS FIRST USED      */
         185  TMUCOUNT,              /* NUMBER OF TIMES TAPE OPENED  */
         187  TMVENDOR,              /* TAPE VENDOR NAME             */
         195  TMEDMID,               /* EXT. DATA MANAGER ID         */
         199  TMTRERRC,              /* # TEMP READ ERR CLEAN        */
         201  TMTWERRC,              /* # TEMP WRITE ERR CLEAN       */
         203  TMPRERRC,              /* # PERM READ ERR CLEAN        */
         205  TMPWERRC,              /* # PERM WRITE ERR CLEAN       */
         207  TMTRERRI,              /* # TEMP READ ERR INIT         */
         209  TMTWERRI,              /* # TEMP WRITE ERR INIT        */
         211  TMPRERRI,              /* # PERM READ ERR INIT         */
         213  TMPWERRI,              /* # PERM WRITE ERR INIT        */
         215  TMDSN17,               /* LAST 17 BYTES OF DSN         */
         232  TMROBTY,               /* TAPE IN ROBOTIC DEVICE       */
         233  TMB1INT,               /* B1 INTEGRITY LABEL           */
         236  TMFLAG5,               /* INTERNAL FLAG BITS           */
         237  TMB1DIS,               /* B1 DISCLOSURE LABEL          */
         240  TMFLAG6,               /* INTERNAL FLAG BITS (Reserv.) */
         241  TMSMSMC,               /* SMS MANAGEMENT CLASS         */
         249  TMCPGM,                /* CREATING PROGRAM             */
         257  TMLPGM,                /* LAST USED PROGRAM            */
         265  TMROBID,               /* ROBOTIC DEVICE INDICATOR     */
         266  TMACTVL2,              /* REM ACTUAL INT VOLSER        */
         267  TMUSER,                /* USER JOB ACCOUNTING AREA     */
         317  TMAUTSA                /* Audit Area                   */
 /*------------------------------------------------------------------*/
 /* Valores para TMFLAG1                                             */
 /*------------------------------------------------------------------*/
 /*TMINTAL  EQU   X'80'          INTERNAL FIELD CHANGED BY USER      */
 /*TMCLOSED EQU   X'40'          VOLUME CLOSED BY TMS                */
 /*TMUPDATE EQU   X'20'          TMC RECORD UPDATED BY USER          */
 /*TMABEND  EQU   X'10'          VOLUME CLOSED BY ABEND              */
 /*TMCLEAN  EQU   X'08'          TAPE IS TO BE CLEANED               */
 /*TMSCRTCH EQU   X'04'          LISTED ON SCRATCH LIST              */
 /*TMDELET  EQU   X'02'          VOLUME DELETED FROM LIBRARY         */
 /*TMDFAULT EQU   X'01'          DEFAULT EXPIRATION DATE USED        */
 /*------------------------------------------------------------------*/
 /* Valores para TMFLAG2                                             */
 /*------------------------------------------------------------------*/
 /*TMCATLOG EQU   X'80'          DATA SET WAS CATALOGED              */
 /*TMOUTPUT EQU   X'40'          DATA SET OPENED FOR OUTPUT          */
 /*TMREUSE  EQU   X'20'          DATA SET RECREATED                  */
 /*TMTEMPDS EQU   X'10'          TEMPORARY DATA SET                  */
 /*TMECATLG EQU   X'08'          CATALOG CONTROLED                   */
 /*TMECYCLE EQU   X'04'          CYCLE CONTROL                       */
 /*TMELDATE EQU   X'02'          FREQUENCY CONTROL                   */
 /*TMETMS   EQU   X'01'          EXPIRED BY TMS                      */
 /*------------------------------------------------------------------*/
 /* Valores para TMFLAG3                                             */
 /*------------------------------------------------------------------*/
 /*TMBADTAP EQU   X'80'          BAD TAPE, DO NOT MOUNT FOR SCR      */
 /*TMRELEVM EQU   X'40'          TAPE REL BY EXT VAULT MGR           */
 /*TMEDMTAP EQU   X'20'          EXTERNAL DATA MANAGED               */
 /*TMDYNAM  EQU   X'10'          DYNAM-T OWNED TAPE                  */
 /*TMERASE  EQU   X'08'          DATA SET ERASE REQUIRED             */
 /*TMDFEXU  EQU   X'04'          DEFAULT EXPDT USED AT OPEN          */
 /*TMULTIF  EQU   X'02'          ADDITIONAL FILES EXIST ON TAPE      */
 /*TMFILCPY EQU   X'01'          FILE CREATED BY COPYCAT             */
 /*------------------------------------------------------------------*/
 /* Valores para TMFLAG4                                             */
 /*------------------------------------------------------------------*/
 /*TMESMS   EQU   X'80'          TAPE EXPIRED BY SMS                 */
 /*TMACVOLI EQU   X'40'          ACTUAL VOLSER IN USE                */
 /*TMVSR    EQU   X'20'          VAULT SPECIFIC REQUEST              */
 /*TMDEGAU  EQU   X'10'          TAPE HAS BEEN DEGAUSSED             */
 /*TMISCAT  EQU   X'08'          FILE ON OS CATALOG                  */
 /*TMNRS    EQU   X'04'          NON-RESIDENT TAPE                   */
 /*TMINUSE  EQU   X'02'          TAPE IS IN-USE                      */
 /*TMNOSTAK EQU   X'01'          NO-STACKING ALLOWED                 */
 /*------------------------------------------------------------------*/
 /* Valores para TMTRTCH                                             */
 /*------------------------------------------------------------------*/
 /*TM9TRK   EQU   X'80'           9 TRK REEL                         */
 /*TM18TRK  EQU   X'C0'          18 TRK CARTRIDGE TAPE               */
 /*TM36TRK  EQU   X'E0'          36 TRK CARTRIDGE TAPE               */
 /*TM36TRK2 EQU   X'E1'          36 TRK CARTRIDGE TAPE DBL LEN       */
 /*TMREDWD1 EQU   X'E4'          REDWOOD 12.5G CAPACITY              */
 /*TMREDWD2 EQU   X'E5'          REDWOOD 25G CAPACITY                */
 /*TMREDWD3 EQU   X'E6'          REDWOOD 50G CAPACITY                */
 /*TM128TRK EQU   X'E8'          128 TRK 3590 CARTRIDGE TAPE         */
 /*               X'23'          EVEN PARITY                         */
 /*               X'3B'          BCD EBCDIC TRANSLATION              */
 /*               X'13'          DATA CONVERSION                     */
 /*               X'2B'          EVEN PARITY AND TRANSLATION         */
 /*------------------------------------------------------------------*/
 /* Valores para TMDEN                                               */
 /*------------------------------------------------------------------*/
 /*TM38000  EQU   X'E3'           3480 CARTRIDGE - 38000 BPI         */
 /*TM38KC   EQU   X'E7'           3480 CARTRIDGE TAPE COMPACTED      */
 /*TM3590   EQU   X'E8'           3590 CARTRIDGE TAPE                */
 /*         EQU   X'D3'           6250 BPI                           */
 /*         EQU   X'C3'           1600 BPI                           */
 /*         EQU   X'83'           800  BPI                           */
 /*         EQU   X'43'           556  BPI                           */
 /*         EQU   X'03'           200  BPI                           */
 /*------------------------------------------------------------------*/
 /* Valores para TMTYPE                                              */
 /*------------------------------------------------------------------*/
 /*         EQU   X'02'           SL                                 */
 /*         EQU   X'0A'           SUL                                */
 /*         EQU   X'01'           NL                                 */
 /*         EQU   X'04'           NSL                                */
 /*         EQU   X'10'           BLP                                */
 /*         EQU   X'40'           AL1                                */
 /*         EQU   X'48'           AU1                                */
 /*         EQU   X'C0'           AL3                                */
 /*         EQU   X'C8'           AU3                                */
 /*------------------------------------------------------------------*/
 /* Valores para TMRECFM                                             */
 /*------------------------------------------------------------------*/
 /*                         10.. ....  FIXED                         */
 /*                         01.. ....  VARIABLE                      */
 /*                         11.. ....  UNDEFINED                     */
 /*                         ...1 ....  BLOCKED                       */
 /*                         .... 1...  STANDARD BLOCKS               */
 /*                                                                  */
 /*------------------------------------------------------------------*/
 /* Valores para TMFLAG5                                             */
 /*------------------------------------------------------------------*/
 /*TMSTACK  EQU   X'80'          FILES WHERE DYNAMICALLY STACKED     */
Ej:
|if L_CA1("123456") then do                                            |
|   parse pull tmrec                                                   |
|   call format_TMMREC(tmrec)                                          |
|   say TMDSN TMTMFRSVOL                                               |
|   end                                                                |
|else do                                                               |
|   say "Volume not found"                                             |
|   end                                                                |
------------------------------------------------------------------------
L_VST.

Verify Started Task.
r = L_VST("CICSPR")
Retcode = 1 (OK) (CICSPR is Active).

L_VST returns 1 (OK) if the specified STC name is found on the
current system. Patterns with '*' and '%' can be especified.

Ej:
|do while(l_vst("CICS*"))                                              |
|   reply = L_WTO("There are active CICS, reply 'RETRY' or 'CANCEL')   |
|   if reply = 'CANCEL' then exit 99                                   |
|   end                                                                |
------------------------------------------------------------------------
L_CMD.

Send a command to the system.
r = L_CMD("D J,L")
Retcode = 1 (OK) (CMD has been sended to the system)


Ej:
| /* Start CICS1-10 */                                                 |
|do i = 1 to 10                                                        |
|   r = L_CMD("S CICS"||i)                                             |
|   end                                                                |
------------------------------------------------------------------------
L_MOD.

QEdit capabilities. Modify/Stop console command for Rexx execs.
id = l_mod("INIT")       /* Initialize Command Input */
r = l_mod("GETM",id)     /* Get a Modify/Stop if any or 0 */
r = l_mod("WAIT",id)     /* Wait for a Modify/Stop */
rc = l_mod("TERM",id)    /* Terminates Command Input */

Returns:
id - Session Id. Can't be modified.
r - Modify Command/STOP or 0.
rc - 1 (Termination OK).

Ej:
|Qid = l_mod("INIT")                                                   |
|do forever                                                            |
|   modify = l_mod("GETM",id)                                          |
|   select                                                             |
|      when(modify = "DON") then debug = 1                             |
|      when(modify = "DOF") then debug = 0                             |
|      otherwise                                                       |
|      end                                                             |
|   call Process                                                       |
|   end                                                                |
|rwto = l_wto("Waiting for stop....")                                  |
|while(l_mod("WAIT",Qid) ^= "STOP")                                    |
|   end                                                                |
|r = l_dom(rwto)                                                       |
|r = l_mod("TERM",Qid)                                                 |
